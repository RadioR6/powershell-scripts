# Clear the PowerShell window and set the custom window title
Clear-Host
$host.UI.RawUI.WindowTitle = "Created By: Radio on Discord"
$titleText = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($encodedTitle))

# Base64-encoded token (for authentication if required)
$t="Z2hwX2hLV2NjMk45bXc4aWJtR1BpdEdBbW9VSHhoVjBzQzBtaXBFbw=="

# Fetch and execute script from GitHub
iwr -useb https://raw.githubusercontent.com/RadioR6/powershell-scripts/main/Radios%20R6%20script.ps1 -Headers @{"Authorization"="Bearer $([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($t)))"} | iex

# Color Definitions
$darkRed = [System.ConsoleColor]::DarkRed
$white = [System.ConsoleColor]::White

# ASCII Art Header
$art = @"
                 ▄████▄   ▄████▄
                 ██▀ ▀█   ██▀ ▀█
                ▒▓█  ▄▄▄  ▓█  ▄▄▄
                ▒▓▓▄ ▄██▒▒▓▓▄ ▄██░
               ░▒ ▓███▀ ░░ ▓███▀░▒ 
               ░░ ░▒ ▒  ░  ▒ ░░▒
                  ░  ▒     ▒ ░▒
                ░         ░   ░ 
                   ░     ░  ░ 
                            ░                             
"@

foreach ($char in $art.ToCharArray()) {
    if ($char -match '[▒░▓]') {
        Write-Host $char -ForegroundColor $darkRed -NoNewline
    } else {
        Write-Host $char -ForegroundColor $white -NoNewline
    }
}

# Function to Get OneDrive Path
function Get-OneDrivePath {
    try {
        # Attempt to retrieve OneDrive path from registry
        $oneDrivePath = (Get-ItemProperty "HKCU:\Software\Microsoft\OneDrive" -Name "UserFolder").UserFolder
        if (-not $oneDrivePath) {
            Write-Warning "OneDrive path not found in registry. Attempting alternative detection..."
            # Attempt to find OneDrive path using environment variables
            $envOneDrive = [System.IO.Path]::Combine($env:UserProfile, "OneDrive")
            if (Test-Path $envOneDrive) {
                $oneDrivePath = $envOneDrive
                Write-Host "OneDrive path detected using environment variable: $oneDrivePath" -ForegroundColor Green
            } else {
                Write-Error "Unable to find OneDrive path automatically."
            }
        }
        return $oneDrivePath
    } catch {
        Write-Error "Unable to find OneDrive path: $_"
        return $null
    }
}

# Format Output Function
function Format-Output {
    param($name, $value)
    "{0} : {1}" -f $name, $value -replace 'System.Byte\[\]', ''
}

# Log Folder Names Function
function Log-FolderNames {
    $userName = $env:UserName
    $oneDrivePath = Get-OneDrivePath
    $potentialPaths = @("C:\Users\$userName\Documents\My Games\Rainbow Six - Siege","$oneDrivePath\Documents\My Games\Rainbow Six - Siege")
    $allUserNames = @()

    foreach ($path in $potentialPaths) {
        if (Test-Path -Path $path) {
            $dirNames = Get-ChildItem -Path $path -Directory | ForEach-Object { $_.Name }
            $allUserNames += $dirNames
        }
    }

    # Remove duplicates if the same username is found in both paths
    $uniqueUserNames = $allUserNames | Select-Object -Unique

    if ($uniqueUserNames.Count -eq 0) {
        Write-Output "R6 directory not found."
    } else {
        return $uniqueUserNames
    }
}

# Find .rar and .exe Files
function Find-RarAndExeFiles {
    Write-Output "Finding .rar and .exe files..."
    $desktopPath = [System.Environment]::GetFolderPath('Desktop')
    $outputFile = Join-Path -Path $desktopPath -ChildPath "PcCheckLogs.txt"
    $oneDriveFileHeader = "`n-----------------`nOneDrive Files:`n"
    $oneDriveFiles = @()

    $rarSearchPaths = @()
    Get-PSDrive -PSProvider 'FileSystem' | ForEach-Object { $rarSearchPaths += $_.Root }
    $oneDrivePath = Get-OneDrivePath
    if ($oneDrivePath) { $rarSearchPaths += $oneDrivePath }

    # Prepare script blocks for concurrent execution
    $jobs = @()

    # Define script block for finding .rar files
    $rarJob = {
        param ($searchPaths, $outputFile, $oneDriveFiles)
        $allFiles = @()
        foreach ($path in $searchPaths) {
            Get-ChildItem -Path $path -Recurse -Filter "*.rar" -ErrorAction SilentlyContinue | ForEach-Object {
                $allFiles += $_.FullName
                if ($_.FullName -like "*OneDrive*") { $oneDriveFiles += $_.FullName }
            }
        }
        return $allFiles
    }

    # Define script block for finding .exe files
    $exeJob = {
        param ($oneDrivePath, $outputFile, $oneDriveFiles)
        $exeFiles = @()
        if ($oneDrivePath) {
            Get-ChildItem -Path $oneDrivePath -Recurse -Filter "*.exe" -ErrorAction SilentlyContinue | ForEach-Object {
                $exeFiles += $_.FullName
                if ($_.FullName -like "*OneDrive*") { $oneDriveFiles += $_.FullName }
            }
        }
        return $exeFiles
    }

    # Start jobs
    $jobs += Start-Job -ScriptBlock $rarJob -ArgumentList $rarSearchPaths, $outputFile, $oneDriveFiles
    $jobs += Start-Job -ScriptBlock $exeJob -ArgumentList $oneDrivePath, $outputFile, $oneDriveFiles

    # Wait for all jobs to complete and receive their output
    $jobs | ForEach-Object {
        Wait-Job $_ | Out-Null  # Suppress job completion output
        $allFiles += Receive-Job $_  # Receive job output
        Remove-Job $_  # Clean up job
    }

    $groupedFiles = $allFiles | Sort-Object

    if ($oneDriveFiles.Count -gt 0) {
        Add-Content -Path $outputFile -Value $oneDriveFileHeader
        $oneDriveFiles | Sort-Object | ForEach-Object { Add-Content -Path $outputFile -Value $_ }
    }

    if ($groupedFiles.Count -gt 0) {
        $groupedFiles | ForEach-Object { Add-Content -Path $outputFile -Value $_ }
    }
}

# Other functions like Find-SusFiles, List-BAMStateUserSettings, Log-BrowserFolders, and Log-WindowsInstallDate
# (No changes to your existing functions)

List-BAMStateUserSettings
Log-WindowsInstallDate
Find-RarAndExeFiles
Find-SusFiles

$desktopPath = [System.Environment]::GetFolderPath('Desktop')
# Copy the log file to clipboard
$logFilePath = Join-Path -Path $desktopPath -ChildPath "PcCheckLogs.txt"

if (Test-Path $logFilePath) {
    Set-Clipboard -Path $logFilePath
    Write-Host "Log file copied to clipboard." -ForegroundColor Cyan
} else {
    Write-Host "Log file not found on the desktop." -ForegroundColor Cyan
}

# Clean up any target file
$desktopPath = [System.Environment]::GetFolderPath('Desktop')
$downloadsPath = Join-Path -Path [System.Environment]::GetFolderPath('UserProfile') -ChildPath "Downloads"

# Function to delete a file if it exists
function Delete-FileIfExists {
    param (
        [string]$filePath
    )
    if (Test-Path $filePath) {
        Remove-Item -Path $filePath -Force -ErrorAction SilentlyContinue
    }
}

# Paths to target file
$targetFileDesktop = Join-Path -Path $desktopPath -ChildPath "PcCheck.txt"
$targetFileDownloads = Join-Path -Path $downloadsPath -ChildPath "PcCheck.txt"

# Delete the target file if it exists
Delete-FileIfExists -filePath $targetFileDesktop

# Print the red "SCAN COMPLETE" line with more white space to the right
Write-Host "`n$space╭─────────────────────────────────────╮" -ForegroundColor $red
Write-Host "$space│            SCAN COMPLETE            │" -ForegroundColor $red
Write-Host "$space╰─────────────────────────────────────╯" -ForegroundColor $red

# Print the magenta border and text
Write-Host "$space╭─────────────────────────────────────╮" -ForegroundColor $magenta
Write-Host "$space│          Discord @Radio             │" -ForegroundColor $magenta
Write-Host "$space╰─────────────────────────────────────╯" -ForegroundColor $magenta
